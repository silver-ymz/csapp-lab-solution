                            | #######################################################################
                            | # Test for copying block of size 18;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f44007000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f21200000000000000 | 	irmovq $18, %rdx		# src and dst have 18 elements
0x014: 30f62806000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f78805000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 802104000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
0x03b: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx	# len-=n
0x045: 720f02000000000000   | 	jl Out				# if so, goto Loop:
                            | 
0x04e:                      | Loop:	
0x04e: 50870000000000000000 | 	mrmovq (%rdi), %r8		# read val1 from src...
0x058: 50970800000000000000 | 	mrmovq 8(%rdi), %r9		# read val2 from src+1...
0x062: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val3 from src+2...
0x06c: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val4 from src+3...
0x076: 40860000000000000000 | 	rmmovq %r8, (%rsi)		# ...and store it to dst
0x080: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)		# ...and store it to dst+1
0x08a: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst+2
0x094: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst+3
0x09e: 6288                 | 	andq %r8, %r8			# val1 <= 0?
0x0a0: 71b300000000000000   | 	jle Npos1		    	# if so, goto Npos1:
0x0a9: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x0b3:                      | Npos1:	
0x0b3: 6299                 | 	andq %r9, %r9		# val2 <= 0?
0x0b5: 71c800000000000000   | 	jle Npos2		    # if so, goto Npos2:
0x0be: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0c8:                      | Npos2:
0x0c8: 62aa                 | 	andq %r10, %r10		# val3 <= 0?
0x0ca: 71dd00000000000000   | 	jle Npos3	    	# if so, goto Npos3:
0x0d3: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0dd:                      | Npos3:
0x0dd: 62bb                 | 	andq %r11, %r11		# val4 <= 0?
0x0df: 71f200000000000000   | 	jle Npos4		    # if so, goto Npos4:
0x0e8: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0f2:                      | Npos4:
0x0f2: 50872000000000000000 | 	mrmovq 32(%rdi), %r8	# read val5 from src+4...
0x0fc: 50972800000000000000 | 	mrmovq 40(%rdi), %r9	# read val6 from src+5...
0x106: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	# read val7 from src+6...
0x110: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11	# read val8 from src+7...
0x11a: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)	# ...and store it to dst+4
0x124: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)	# ...and store it to dst+5
0x12e: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst+6
0x138: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)	# ...and store it to dst+7
0x142: 6288                 | 	andq %r8, %r8			# val5 <= 0?
0x144: 715701000000000000   | 	jle Npos5		    	# if so, goto Npos5:
0x14d: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x157:                      | Npos5:
0x157: 6299                 | 	andq %r9, %r9		# val6 <= 0?
0x159: 716c01000000000000   | 	jle Npos6		    # if so, goto Npos6:
0x162: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x16c:                      | Npos6:
0x16c: 62aa                 | 	andq %r10, %r10		# val7 <= 0?
0x16e: 718101000000000000   | 	jle Npos7		    # if so, goto Npos7:
0x177: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x181:                      | Npos7:
0x181: 62bb                 | 	andq %r11, %r11		# val8 <= 0?
0x183: 719601000000000000   | 	jle Npos8		    # if so, goto Npos8:
0x18c: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x196:                      | Npos8:
0x196: 50874000000000000000 | 	mrmovq 64(%rdi), %r8	# read val5 from src+8...
0x1a0: 50974800000000000000 | 	mrmovq 72(%rdi), %r9	# read val6 from src+9...
0x1aa: 40864000000000000000 | 	rmmovq %r8, 64(%rsi)	# ...and store it to dst+8
0x1b4: 40964800000000000000 | 	rmmovq %r9, 72(%rsi)	# ...and store it to dst+9
0x1be: 6288                 | 	andq %r8, %r8			# val5 <= 0?
0x1c0: 71d301000000000000   | 	jle Npos9		    	# if so, goto Npos5:
0x1c9: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x1d3:                      | Npos9:
0x1d3: 6299                 | 	andq %r9, %r9		# val6 <= 0?
0x1d5: 71e801000000000000   | 	jle Npos10		    # if so, goto Npos6:
0x1de: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1e8:                      | Npos10:
0x1e8: c0f75000000000000000 | 	iaddq $0x50, %rdi		# src+=n
0x1f2: c0f65000000000000000 | 	iaddq $0x50, %rsi		# dst+=n
0x1fc:                      | Test:
0x1fc: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx		# len-=n
0x206: 754e00000000000000   | 	jge Loop			# if so, goto Loop:
                            | 
0x20f:                      | Out:
0x20f: c0f20700000000000000 | 	iaddq $7, %rdx		
0x219: 723402000000000000   | 	jl Opos1
0x222: 765b02000000000000   | 	jg Oops2
0x22b: 709203000000000000   | 	jmp Loop3
0x234:                      | Opos1:
0x234: c0f20200000000000000 | 	iaddq $2, %rdx
0x23e: 73e403000000000000   | 	je Loop1
0x247: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x251: 73bb03000000000000   | 	je Loop2
0x25a: 90                   | 	ret
0x25b:                      | Oops2:
0x25b: c0f2fdffffffffffffff | 	iaddq $-3, %rdx
0x265: 769302000000000000   | 	jg Opos3
0x26e: 731703000000000000   | 	je Loop6
0x277: c0f20100000000000000 | 	iaddq $1, %rdx
0x281: 726903000000000000   | 	jl Loop4
0x28a: 704003000000000000   | 	jmp Loop5
0x293:                      | Opos3:
0x293: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x29d: 72ee02000000000000   | 	jl Loop7
0x2a6: 73c502000000000000   | 	je Loop8
0x2af:                      | Loop9:
0x2af: 50a74000000000000000 | 	mrmovq 64(%rdi), %r10	# read val from src...
0x2b9: 40a64000000000000000 | 	rmmovq %r10, 64(%rsi)	# ...and store it to dst
0x2c3: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x2c5:                      | Loop8:
0x2c5: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10	# read val from src...
0x2cf: 71c502000000000000   | 	jle Loop8		    	# if so, goto Loop6:
0x2d8: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x2e2: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)	# ...and store it to dst
0x2ec: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x2ee:                      | Loop7:
0x2ee: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	# read val from src...
0x2f8: 71ee02000000000000   | 	jle Loop7		    	# if so, goto Loop6:
0x301: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x30b: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x315: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x317:                      | Loop6:
0x317: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10	# read val from src...
0x321: 711703000000000000   | 	jle Loop6		    	# if so, goto Loop6:
0x32a: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x334: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)	# ...and store it to dst
0x33e: 62aa                 | 	andq %r10, %r10			# val <= 0?	
0x340:                      | Loop5:
0x340: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x34a: 714003000000000000   | 	jle Loop5		    	# if so, goto Loop5:
0x353: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x35d: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x367: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x369:                      | Loop4:
0x369: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10	# read val1 from src...
0x373: 716903000000000000   | 	jle Loop4		    	# if so, goto Loop4:
0x37c: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x386: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x390: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x392:                      | Loop3:
0x392: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x39c: 719203000000000000   | 	jle Loop3		    	# if so, goto Loop3:
0x3a5: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x3af: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x3b9: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x3bb:                      | Loop2:
0x3bb: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src...
0x3c5: 71bb03000000000000   | 	jle Loop2		    	# if so, goto Loop2:
0x3ce: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x3d8: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x3e2: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x3e4:                      | Loop1:
0x3e4: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x3ee: 71e403000000000000   | 	jle Loop1		    	# if so, goto Loop1:
0x3f7: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x401: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# ...and store it to dst
0x40b: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x40d: 712004000000000000   | 	jle Done		    	# if so, goto Done:
0x416: c0f00100000000000000 | 	iaddq $1, %rax			# count++
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x420:                      | Done:
0x420: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x421:                      | End:
                            | #/* $end ncopy-ys */
0x421:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 10.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x421:                      | check:
                            | 	# Return value test
0x421: 30fa0a00000000000000 | 	irmovq $10,%r10
0x42b: 61a0                 | 	subq %r10,%rax
0x42d: 734904000000000000   | 	je checkb
0x436: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x440: 708705000000000000   | 	jmp cdone
0x449:                      | checkb:
                            | 	# Code length check
0x449: 30f02104000000000000 | 	irmovq EndFun,%rax
0x453: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x45d: 6120                 | 	subq %rdx,%rax
0x45f: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x469: 6102                 | 	subq %rax,%rdx
0x46b: 758704000000000000   | 	jge checkm
0x474: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x47e: 708705000000000000   | 	jmp cdone
0x487:                      | checkm:
0x487: 30f22806000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x491: 30f38805000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x49b: 30f71200000000000000 | 	irmovq $18,%rdi  # Count
0x4a5: 6277                 | 	andq %rdi,%rdi
0x4a7: 730505000000000000   | 	je checkpre         # Skip check if count = 0
0x4b0:                      | mcloop:
0x4b0: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x4ba: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x4c4: 6160                 | 	subq %rsi,%rax
0x4c6: 73e204000000000000   | 	je  mok
0x4cf: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x4d9: 708705000000000000   | 	jmp cdone
0x4e2:                      | mok:
0x4e2: 30f00800000000000000 | 	irmovq $8,%rax
0x4ec: 6002                 | 	addq %rax,%rdx	  # dest ++
0x4ee: 6003                 | 	addq %rax,%rbx    # src++
0x4f0: 30f00100000000000000 | 	irmovq $1,%rax
0x4fa: 6107                 | 	subq %rax,%rdi    # cnt--
0x4fc: 76b004000000000000   | 	jg mcloop
0x505:                      | checkpre:
                            | 	# Check for corruption
0x505: 30f22006000000000000 | 	irmovq Predest,%rdx
0x50f: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x519: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x523: 6120                 | 	subq %rdx,%rax
0x525: 734105000000000000   | 	je checkpost
0x52e: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x538: 708705000000000000   | 	jmp cdone
0x541:                      | checkpost:
                            | 	# Check for corruption
0x541: 30f2b806000000000000 | 	irmovq Postdest,%rdx
0x54b: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x555: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x55f: 6120                 | 	subq %rdx,%rax
0x561: 737d05000000000000   | 	je checkok
0x56a: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x574: 708705000000000000   | 	jmp cdone
0x57d:                      | checkok:
                            | 	# Successful checks
0x57d: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x587:                      | cdone:
0x587: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x588:                      | 	.align 8
0x588:                      | src:
0x588: 0100000000000000     | 	.quad 1
0x590: 0200000000000000     | 	.quad 2
0x598: 0300000000000000     | 	.quad 3
0x5a0: fcffffffffffffff     | 	.quad -4
0x5a8: 0500000000000000     | 	.quad 5
0x5b0: 0600000000000000     | 	.quad 6
0x5b8: 0700000000000000     | 	.quad 7
0x5c0: 0800000000000000     | 	.quad 8
0x5c8: f7ffffffffffffff     | 	.quad -9
0x5d0: f6ffffffffffffff     | 	.quad -10
0x5d8: 0b00000000000000     | 	.quad 11
0x5e0: f4ffffffffffffff     | 	.quad -12
0x5e8: f3ffffffffffffff     | 	.quad -13
0x5f0: f2ffffffffffffff     | 	.quad -14
0x5f8: f1ffffffffffffff     | 	.quad -15
0x600: 1000000000000000     | 	.quad 16
0x608: 1100000000000000     | 	.quad 17
0x610: eeffffffffffffff     | 	.quad -18
0x618: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x620:                      | 	.align 16
0x620:                      | Predest:
0x620: fadebc0000000000     | 	.quad 0xbcdefa
0x628:                      | dest:
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8:                      | Postdest:
0x6b8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x6c0:                      | .align 8
                            | # Run time stack
0x6c0: 0000000000000000     | 	.quad 0
0x6c8: 0000000000000000     | 	.quad 0
0x6d0: 0000000000000000     | 	.quad 0
0x6d8: 0000000000000000     | 	.quad 0
0x6e0: 0000000000000000     | 	.quad 0
0x6e8: 0000000000000000     | 	.quad 0
0x6f0: 0000000000000000     | 	.quad 0
0x6f8: 0000000000000000     | 	.quad 0
0x700: 0000000000000000     | 	.quad 0
0x708: 0000000000000000     | 	.quad 0
0x710: 0000000000000000     | 	.quad 0
0x718: 0000000000000000     | 	.quad 0
0x720: 0000000000000000     | 	.quad 0
0x728: 0000000000000000     | 	.quad 0
0x730: 0000000000000000     | 	.quad 0
0x738: 0000000000000000     | 	.quad 0
                            | 
0x740:                      | Stack:
